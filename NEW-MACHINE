#!/bin/dash

# VPN login: "Legacy default"  john.yates wireless

# checkout:
# - mupdf (might want to build from source: git clone --recursive git://git.ghostscript.com/mupdf.git)

# Install Google Chrome browser
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
sudo apt-get update
sudo apt-get install google-chrome-stable



# Install most recent cmake (awesome currently wants at least 3.0.0)
cat >/tmp/cmake.sh <<EOF
#!/bin/dash

RELEASE=$1

cd /tmp
sudo mkdir -p /usr/local/cmake/cmake-${RELEASE}
wget https://cmake.org/files/v${RELEASE%.*}/cmake-${RELEASE}.tar.gz
tar -xzf cmake-${RELEASE}.tar.gz
cd /tmp/cmake-${RELEASE}
./bootstrap --prefix=/usr/local/cmake/cmake-${RELEASE} && make
sudo make install
sudo chown -R root:staff /usr/local/cmake
sudo gzip -9 man/man1/* man/man7/*
sudo mv /usr/bin/cmake /usr/bin/cmake-distro
sudo mv /usr/bin/cpack /usr/bin/cpack-distro
sudo mv /usr/bin/ctest /usr/bin/ctest-distro
sudo mv /usr/share/man/man1/cmake.1.gz /usr/share/man/man1/cmake-distro.1.gz
sudo mv /usr/share/man/man1/cpack.1.gz /usr/share/man/man1/cpack-distro.1.gz
sudo mv /usr/share/man/man1/ctest.1.gz /usr/share/man/man1/ctest-distro.1.gz

sudo update-alternatives \
 --install /usr/bin/cmake     cmake     /usr/local/cmake/cmake-${RELEASE}/bin/cmake 1 \
 --slave   /usr/bin/cmake-gui cmake-gui /usr/local/cmake/cmake-${RELEASE}/bin/cmake-gui \
 --slave   /usr/bin/ccmake    ccmake    /usr/local/cmake/cmake-${RELEASE}/bin/ccmake \
 --slave   /usr/bin/cpack     cpack     /usr/local/cmake/cmake-${RELEASE}/bin/cpack \
 --slave   /usr/bin/ctest     ctest     /usr/local/cmake/cmake-${RELEASE}/bin/ctest \
\
 --slave   /usr/share/man/man1/ccmake.1.gz                      ccmake.1.gz                      /usr/local/cmake/cmake-${RELEASE}/man/man1/ccmake.1.gz \
 --slave   /usr/share/man/man1/cmake.1.gz                       cmake.1.gz                       /usr/local/cmake/cmake-${RELEASE}/man/man1/cmake.1.gz \
 --slave   /usr/share/man/man1/cmake-gui.1.gz                   cmake-gui.1.gz                   /usr/local/cmake/cmake-${RELEASE}/man/man1/cmake-gui.1.gz \
 --slave   /usr/share/man/man1/cpack.1.gz                       cpack.1.gz                       /usr/local/cmake/cmake-${RELEASE}/man/man1/cpack.1.gz \
 --slave   /usr/share/man/man1/ctest.1.gz                       ctest.1                          /usr/local/cmake/cmake-${RELEASE}/man/man1/ctest.1.gz \
\
 --slave   /usr/share/man/man7/cmake-buildsystem.7.gz           cmake-buildsystem.7.gz           /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-buildsystem.7.gz \
 --slave   /usr/share/man/man7/cmake-commands.7.gz              cmake-commands.7.gz              /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-commands.7.gz \
 --slave   /usr/share/man/man7/cmake-compile-features.7.gz      cmake-compile-features.7.gz      /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-compile-features.7.gz \
 --slave   /usr/share/man/man7/cmake-developer.7.gz             cmake-developer.7.gz             /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-developer.7.gz \
 --slave   /usr/share/man/man7/cmake-generator-expressions.7.gz cmake-generator-expressions.7.gz /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-generator-expressions.7.gz \
 --slave   /usr/share/man/man7/cmake-generators.7.gz            cmake-generators.7.gz            /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-generators.7.gz \
 --slave   /usr/share/man/man7/cmake-language.7.gz              cmake-language.7.gz              /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-language.7.gz \
 --slave   /usr/share/man/man7/cmake-modules.7.gz               cmake-modules.7.gz               /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-modules.7.gz \
 --slave   /usr/share/man/man7/cmake-packages.7.gz              cmake-packages.7.gz              /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-packages.7.gz \
 --slave   /usr/share/man/man7/cmake-policies.7.gz              cmake-policies.7.gz              /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-policies.7.gz \
 --slave   /usr/share/man/man7/cmake-properties.7.gz            cmake-properties.7.gz            /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-properties.7.gz \
 --slave   /usr/share/man/man7/cmake-qt.7.gz                    cmake-qt.7.gz                    /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-qt.7.gz \
 --slave   /usr/share/man/man7/cmake-toolchains.7.gz            cmake-toolchains.7.gz            /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-toolchains.7.gz \
 --slave   /usr/share/man/man7/cmake-variables.7.gz             cmake-variables.7.gz             /usr/local/cmake/cmake-${RELEASE}/man/man7/cmake-variables.7.gz \
EOF

# Install most recent autoconf tools (emacs currently wants at least 2.65)
cd /tmp
wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz
tar -xJf autoconf-2.69.tar.xz
cd /tmp/autoconf-2.69
./configure
make
sudo make install


# Enable apt-get Spotify installation
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886
echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list


# Install a bunch of dependencies
#
# echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
# sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install fonts-dejavu # TEMPORARY: http://httpredir.debian.org/debian/ jessie main as a repository
sudo apt-get install \
  apache2 \
  asciidoc \
  autoconf \
  automake \
  autotools-dev \
  awesome \
  bison \
  bleachbit \
  build-essential \
  bzr \
  ccache \
  clang \
  cmake \
  curl \
  cvsps \
  devscripts \
  dh-exec \
  doxygen-latex \
  dwarfdump \
  emacs \
  exuberant-ctags \
  flex \
  git \
  global \
  gnutls-dev \
  gparted \
  gperf \
  graphviz \
  heirloom-mailx \
  imagemagick \
  inotify-tools \
  libappindicator1 \
  libbison-dev \
  libboost-all-dev \
  libcgi-pm-perl 
  libcurl4-gnutls-dev \
  libdbd-sqlite3-perl \
  libdbus-1-dev \
  libdw-dev \
  libexpat1-dev \
  libgconf2-dev \
  libgif-dev \
  libgpm-dev \
  libgtk2.0-dev \
  libjna-java \
  libjpeg-dev \
  libm17n-dev \
  libmagick++-dev \
  libmagickwand-dev \
  libncurses5-dev \
  libotf-dev \
  librsvg2-dev \
  libtinfo-dev \
  libx11-dev \
  libxml2-dev \
  libxpm-dev \
  llvm \
  menu \
  mercurial \
  mscgen \
  msmtp \
  m4 \
  network-manager-openconnect-gnome \
  pavucontrol \
  python-software-properties \
  silversearcher-ag \
  spotify-client \
  texinfo \
  texlive-fonts-extra \
  texlive-latex-base \
  ttf-mscorefonts-installer \
  unison-all-gtk \
  xmlto \
  zlib1g-dev \



# enable generalized debugging
#
#  Ubuntu:
#
sudo sed -i -e 's/kernel.yama.ptrace_scope = 1/kernel.yama.ptrace_scope = 0/' /etc/sysctl.d/10-ptrace.conf
sudo sysctl -w kernel.yama.ptrace_scope=0
#
#  Debian
#
sudo sed -i -e 's/kernel.yama.ptrace_scope = 1/kernel.yama.ptrace_scope = 0/' /etc/sysctl.d/disable-yama-ptrace-scope-limit.conf
sudo sysctl -w kernel.yama.ptrace_scope=0



# Setup CCache
#
cat >>~/.profile <<EOF
export CCACHE_DIR=/ccc
export CCACHE_LOGFILE=/tmp/ccache.log
export CCACHE_SLOPPINESS=include_file_mtime,file_macro,time_macros
export CCACHE_TEMPDIR=/tmp
export USE_CCACHE=1
EOF
source ~/.profile
sudo mkdir -p /ccc
sudo chmod a+w /ccc
ccache -F0 -M0

# Install latest git:
#
#  Ubuntu:
#
sudo add-apt-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
#
#  Debian: http://superuser.com/questions/644586/how-to-upgrade-to-latest-git-on-debian-7
#
mkdir ~/devel && cd $_
dget http://ftp.de.debian.org/debian/pool/main/g/git/git_2.9.3-1.dsc
dpkg-source -x git_2.9.3-1.dsc
cd git-2.9.3
dpkg-checkbuilddeps
dch --bpo
# save changelog and exit emacs
# in Makefile comment out body of ^test: all
dpkg-buildpackage -uc -us -b  # takes a long time to run tests
sudo dpkg -i ../*.deb
rm -rf ~/git_2.9.3* ~/git-2.9.3



# Download my configuration and install it in my home directory
#
cd ~
rm -rf ~/MyConfiguration ~/Documents ~/Music ~/Public ~/Templates ~/Videos ~/examples.desktop
git clone https://github.com/jsyjr/MyConfiguration.git
mv ~/MyConfiguration/{*,.[a-zA-Z0-9]*} ~
rm -rf ~/MyConfiguration


# Install Adobe's proportional SourceSans and SourceSerifPro as well
# as its monospaced SourceCodePro fonts
#
sudo rm   -rf /usr/local/share/fonts/Source* /tmp/Source* /tmp/source-*
sudo mkdir -p /usr/local/share/fonts/SourceCodePro /usr/local/share/fonts/SourceSans /usr/local/share/fonts/SourceSerifPro
cd /tmp

wget https://github.com/adobe-fonts/source-code-pro/archive/1.017R.zip -O SourceCodePro.zip
unzip SourceCodePro.zip
sudo cp /tmp/source-code*/TTF/* /usr/local/share/fonts/SourceCodePro

wget https://github.com/adobe-fonts/source-sans-pro/archive/2.010R-ro/1.065R-it.zip -O SourceSans.zip
unzip SourceSans.zip
sudo cp /tmp/source-sans*/TTF/* /usr/local/share/fonts/SourceSans

wget https://github.com/adobe-fonts/source-serif-pro/archive/1.017R.zip -O SourceSerifPro.zip
unzip SourceSerifPro.zip
sudo cp /tmp/source-serif*/TTF/* /usr/local/share/fonts/SourceSerifPro

rm   -rf /tmp/Source* /tmp/source-*

# Install Chris Simpkins' Hack font
#
sudo rm   -rf /usr/local/share/fonts/Hack /tmp/Hack*
sudo mkdir -p /usr/local/share/fonts/Hack
cd /tmp
wget https://github.com/chrissimpkins/Hack/releases/download/v2.010/Hack-v2_010-ttf.zip -O Hack.zip
unzip Hack.zip
sudo cp /tmp/Hack-*.ttf /usr/local/share/fonts/Hack
rm /tmp/Hack*


# Install the Dina bitmapped font
#
sudo rm    -rf /usr/local/share/fonts/Dina
sudo mkdir -p  /usr/local/share/fonts/Dina
sudo cp ~/.dinafont/dina/* /usr/local/share/fonts/Dina


# Install the Droid Sana Mono (slashed zero) bitmapped font
#
cd /tmp
sudo rm    -rf /usr/local/share/fonts/DroidSansMonoSlashed
sudo mkdir -p  /usr/local/share/fonts/DroidSansMonoSlashed
wget http://www.cosmix.org/software/files/DroidSansMonoSlashed.zip
unzip DroidSansMonoSlashed.zip
sudo cp DroidSansMonoSlashed.ttf /usr/local/share/fonts/DroidSansMonoSlashed/DroidSansMonoSlashed.ttf
rm -rf /tmp/DroidSansMonoSlashed*

# Update system font databases
#
sudo dpkg-reconfigure fontconfig-config

# Turn on bitmap fonts but exclude X11's crummy Helvetica
#
cd /etc/fonts/conf.d
sudo rm -f 70-no-bitmaps.conf 70-yes-bitmaps.conf
sudo ln -s ../conf.avail/70-yes-bitmaps.conf .

cd /etc/fonts/conf.avail
sudo bash -c 'cat >70-yes-bitmaps.conf <<EOF
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
<!-- Reject X11 bitmap Helvetica fonts -->
 <selectfont>
  <rejectfont>
   <glob>/usr/share/fonts/X11/*/helv*.pcf.gz</glob>
  </rejectfont>
 </selectfont>
</fontconfig>
EOF'

# Update and verify font caches
#
sudo dpkg-reconfigure fontconfig
sudo fc-cache
fc-list | grep Dina
fc-list | grep Hack
fc-list | grep Slashed
fc-list | grep Source


# Create a directory for projects to be cloned from the net
#
mkdir -p ~/repos

# Download and build suckless st (st-light, st-dark)
#
cd ~/repos
rm -rf ~/repos/st
git clone http://git.suckless.org/st
cd st
~/bin/rebuild-st

# Get a more up to date Universal ctags
cd ~/repos
rm -rf ctags
git clone https://github.com/universal-ctags/ctags.git
cd ctags
~/bin/rebuild-ctags


# Install a recent version of global from
#  http://www.gnu.org/software/global/download.html
cd <download directory>
tar xzkf <tarball>
cd global-x.y.z
./configure --prefix=/usr --with-sqlite3 CFLAGS='-march=corei7 -O3' --with-exuberant-ctags=/usr/local/bin/ctags
make
sudo make install


# Install Spotify
#   1. Add the Spotify repository signing key to be able to verify downloaded packages
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886
#   2. Add the Spotify repository
echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list
#   3. Update list of available packages
sudo apt-get update
#   4. Install Spotify
sudo apt-get install spotify-client


# Download and build emacs
#
cd ~/repos
rm -rf ~/repos/emacs
git clone git://git.savannah.gnu.org/emacs.git
cd emacs
./autogen.sh
~/bin/rebuild-emacs
xrdb ~/.Xresources

# sudo make install
# sudo update-alternatives \
#  --install /usr/bin/emacs                                                 emacs              /usr/local/emacs/bin/emacs 1 \
#  --slave   /usr/share/icons/hicolor/128x128/apps/emacs.png                emacs-128x128.png  /usr/local/emacs/share/icons/hicolor/128x128/apps/emacs.png \
#  --slave   /usr/share/icons/hicolor/16x16/apps/emacs.png                  emacs-16x16.png    /usr/local/emacs/share/icons/hicolor/16x16/apps/emacs.png \
#  --slave   /usr/share/icons/hicolor/24x24/apps/emacs.png                  emacs-24x24.png    /usr/local/emacs/share/icons/hicolor/24x24/apps/emacs.png \
#  --slave   /usr/share/icons/hicolor/32x32/apps/emacs.png                  emacs-32x32.png    /usr/local/emacs/share/icons/hicolor/32x32/apps/emacs.png \
#  --slave   /usr/share/icons/hicolor/48x48/apps/emacs.png                  emacs-48x48.png    /usr/local/emacs/share/icons/hicolor/48x48/apps/emacs.png \
#  --slave   /usr/share/icons/hicolor/scalable/mimetypes/emacs-document.svg emacs-document.svg /usr/local/emacs/share/icons/hicolor/scalable/mimetypes/emacs-document.svg \
#  --slave   /usr/share/man/man1/emacs.1.gz                                 emacs.1.gz         /usr/local/emacs/share/man/man1/emacs.1.gz \
#  --slave   /usr/share/icons/hicolor/scalable/apps/emacs.svg               emacs.svg          /usr/local/emacs/share/icons/hicolor/scalable/apps/emacs.svg \
#
# sudo update-alternatives \
#  --install /usr/bin/emacsclient                                           emacsclient        /usr/local/emacs/bin/emacsclient 1 \
#  --slave   /usr/share/man/man1/emacsclient.1.gz                           emacsclient.1.gz   /usr/local/emacs/share/man/man1/emacsclient.1.gz \
#
# sudo update-alternatives \
#  --install /usr/bin/ebrowse                                               ebrowse            /usr/local/emacs/bin/ebrowse 1 \
#  --slave   /usr/share/man/man1/ebrowse.1.gz                               ebrowse.1.gz       /usr/local/emacs/share/man/man1/ebrowse.1.gz \

# Download and build the latest version of cc-mode
#
cd ~/repos
rm -rf ~/repos/cc-mode
hg clone http://hg.code.sf.net/p/cc-mode/cc-mode cc-mode
cd cc-mode
~/bin/rebuild-cc-mode

# Download and build doxygen
#
sudo apt-get install \
  libclang-dev \

cd ~/repos
rm -rf ~/repos/doxygen
git clone https://github.com/doxygen/doxygen.git
cd doxygen
~/bin/rebuild-doxygen
make -j8
# sudo make install

# Unavailable on Debian at Mathworks
sudo apt-get install \
  libxkbcommon-dev \
  libxkbcommon-x11-dev \

# Download and build awesome window manager
#
sudo apt-get install \
  asciidoc \
  lua-discount \
  lua-ldoc \
  liblua5.1-dev \
  libstartup-notification0-dev \
  libx11-xcb-dev \
  libxcb-cursor-dev \
  libxcb-icccm4-dev \
  libxcb-keysyms1-dev \
  libxcb-randr0-dev \
  libxcb-shape0-dev \
  libxcb-util0-dev \
  libxcb-xinerama0-dev \
  libxcb-xkb-dev \
  libxcb-xtest0-dev \
  libxdg-basedir-dev \
  libxkbcommon-dev \
  libxkbcommon-x11-dev \
  lua5.1 \
  lua-lgi \

cd ~/repos
rm -rf ~/repos/awesome
git clone https://github.com/awesomeWM/awesome.git
cd ~/repos/awesome

# follow: https://awesome.naquadah.org/wiki/Awesome-3-git-debian


sudo mkdir -p /net/whs/homes

# At Mathworks add a line to /etc/fstab for /local-ssd
# (Use blkid to find the UUID)
cat >>/tmp/fstab <<EOF
UUID=xx	/local-ssd	btrfs	rw,noatime,discard,compress=lzo,user_subvol_rm_allowed	0	0
EOF


cat >/tmp/fstab <<EOF
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system>                         <mount point>  <type>   <options>               <dump> <pass>
#
# /dev/sda
#
# /boot was on /dev/sda1 during installation
UUID=45383228-f8db-46aa-ab8a-248f219a4878   /boot       ext4    relatime,nodiratime          0 2
# /var was on /dev/sda2 during installation
UUID=bc626005-2d72-4ad9-b92c-57190da8de8f   /var        ext4    relatime,nodiratime          0 2
# swap was on /dev/sda3 during installation
UUID=5edf0681-dbe7-4334-b2da-17e278304fc1   none        swap    sw                           0 0
# /bulk was on /dev/sda4 during installation
UUID=ee510215-f3a4-4894-9e66-623b2c0a760c   /bulk       ext4    async,data=writeback,barrier=0,nouser_xattr,noacl,journal_async_commit,delalloc,max_batch_time=50000,noauto_da_alloc,dioread_nolock,noatime,nodiratime,discard  0 2
#
# /dev/sdb
#
# / was on /dev/sdb1 during installation
UUID=2b529276-47f7-4c04-bc6e-c68692a2787d   /           ext4    relatime,nodiratime,discard  0 1
# /ccache was on /dev/sdb2 during installation
UUID=32f76819-6490-4814-9d66-484a734cc403   /ccc        ext4    async,data=writeback,barrier=0,nouser_xattr,noacl,journal_async_commit,delalloc,max_batch_time=50000,noauto_da_alloc,dioread_nolock,noatime,nodiratime,discard  0 2
# /spare0 was on /dev/sdb3 during installation
UUID=f0c73aca-c916-4391-b498-9b0f57020c8a   /spare0     ext4    noatime,nodiratime,discard   0 2
#
# /dev/sdc
#
# /home was on /dev/sdc1 during installation
UUID=7fa16b1f-e6f2-47a3-901c-5781b4782480   /home       ext4    relatime,nodiratime,discard  0 2
# /ssd-cache was on /dev/sdc2 during installation
UUID=cdc593d1-ad42-48db-a44e-43b959bc10b5   /ssd-cache  ext4    relatime,nodiratime,discard  0 2
# /spare1 was on /dev/sdc3 during installation
UUID=b67dae08-d68d-4062-b6b9-905aa92a85b7   /spare1     ext4    noatime,nodiratime,discard   0 2
#
# TMPFS
#
none                                      /tmp        tmpfs   noatime,nodiratime             0 0
none                                      /var/tmp    tmpfs   relatime,nodiratime            0 0
#
# Network mounts  [ paren eFy wed jSy ]
#
//10.1.1.2/homes   /net/whs/homes  cifs   defaults,username=Dad,password=paren eFy wed jSy   0 2
EOF


# Disk performance on Debian 8 at Mathworks:
# - disable quotas
sudo btrfs quota disable /local-ssd
# - disable automatic balancing in sbrmtree and sbsyncmaster
sudo touch /local-ssd/.skip-btrfs-balance
# - remove 'discard' from /etc/fstab's /local-ssd entry
sudo nano /etc/fstab
# - perform a weekly TRIM on every volume that supports that operation
sudo cp /usr/share/doc/util-linux/examples/fstrim.{service,timer} /etc/systemd/system
sudo systemctl enable fstrim.timer
# - adjust swappiness
sudo bash -c "echo 'vm.swappiness = 15' >> /etc/sysctl.conf"
sudo sysctl -p

# Debian 8 at Mathworks: updated autofs package to enable noresvport by default
sudo apt-get upgrade g1439252autofs
