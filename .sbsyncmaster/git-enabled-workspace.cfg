########################################################################
#
# Perform the fundamental "sync" to copy sources and compiled binaries
# (cfg files: http://www-sbtools-ah/hub/share/sbtools/etc/sbsync/cfg/)
#
########################################################################
-P glnxa64
-cfg cgir

-run-after-sync "pwd"

########################################################################
#
# Clean out obvious trash
#
########################################################################

-run-after-sync "time -p rm -rf .sbtools/global GPATH GRTAGS GTAGS ID"

# If this latest cluster image arrived with an embedded .git then delete it
-run-after-sync "if [ -e .git ]; then chmod -R a+w .git ; rm -rf .git ; fi"


########################################################################
#
# DTMs on .m files get twiddled.  .p files are not tracked by git and
# hence keep their DTMs from the original sync.  Better to regenerate
# those .p files than to have them appear to be out of date.
#
########################################################################

# -run-after-sync 'time -p find -type f -name "*.p" -exec rm -f {} +'

########################################################################
#
# Build various (large) index structures.
#
########################################################################

# Generate the per component lists of files maintained in a parallel
# directory tree beneath matlab/.sbtools/global but drop the nearly
# useless list of derived files
-run-after-sync "time -p sblocate -gendb"
-run-after-sync "rm -rf .sbtools/global/matlab/derived"

# Ensure connection to localhub (must run after sblocate)
-run-after-sync "sblocalhub -sync"

# Use the remaining database of sblocated file to generate the tags database
-run-after-sync "time -p sbglobal -num-threads 12 -gentags matlab/src matlab/toolbox matlab/test"

# Use my newer versions of GNU global and gtags if available
-run-after-sync "if [ -e ${HOME}/bin/mathworks-global ] ; then PATH=/usr/local/bin:${PATH} time -p ${HOME}/bin/mathworks-global matlab/src matlab/toolbox matlab/test ; fi"

# Regenerate matlab/toolbox/local/toolbox_cache-ARCH.xml
-run-after-sync "time -p sbgentbxcache"

# Build emacs' WorkSpace Files index (for my wsf.el package)
-run-after-sync "time -p /usr/bin/emacs --batch --load ${HOME}/.emacs --eval='(load-library \"wsf\")' -f wsf--current-completions -f save-buffers-kill-emacs"


########################################################################
#
# Delete nearly useless debug symbols that only slow us down
# (Client needs -no-debug-backing-stores in $(HOME)/.sbtools/sb.cfg)
#
########################################################################

# Protect libraries needed so breaksegv works
-run-after-sync "mkdir -p matlab/bin/glnxa64/SAVE"
-run-after-sync "ls -l matlab/bin/glnxa64/libmwcg* >matlab/bin/glnxa64/SAVE/before.dir"
-run-after-sync "if [ -f matlab/bin/glnxa64/libmwmcr.so.dbg ]; then mv matlab/bin/glnxa64/libmwmcr.so.dbg matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg ;fi"
-run-after-sync "if [ -f matlab/bin/glnxa64/libmwfl.so.dbg  ]; then mv matlab/bin/glnxa64/libmwfl.so.dbg  matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  ;fi"
# Delete all remaining .dbg files
-run-after-sync "time -p find matlab/bin/glnxa64 -name \"*.dbg\" -exec rm {} \;"
# Restore libraries needed so breaksegv works
-run-after-sync "if [ -f matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg ]; then mv matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg matlab/bin/glnxa64/libmwmcr.so.dbg ;fi"
-run-after-sync "if [ -f matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  ]; then mv matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  matlab/bin/glnxa64/libmwfl.so.dbg  ;fi"
# -run-after-sync "rm -r matlab/bin/glnxa64/SAVE"


########################################################################
#
# Run sbsmartbuild's prebuild to create the proper header environment
#
########################################################################

-run-after-sync "cd matlab ; time -p mw ch validate"
-run-after-sync "echo 'matlab/src/cg_ir/export/include/cg_ir/fwd/common.hpp' > force.txt"
-run-after-sync "time -p sbsmartbuild -F force.txt DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1 prebuild"


########################################################################
#
# Rebuild in full debug-mode the modules we care about (those in ez.mk)
#
########################################################################

# Build the ez.mk modules with debugging symbols
# -run-after-sync "cd matlab/src/cg_ir ; time -p ${MAKE_SCRIPT} -no-sbsyscheck -distcc -f ${SYNCMASTERDIR}/ez.mk build_debug_only"
-run-after-sync "cd matlab/src/cg_ir ; time -p ${MAKE_SCRIPT} DEBUG=1 -no-sbsyscheck -distcc -f ez.mk"
-run-after-sync "ls -l matlab/bin/glnxa64/libmwcg* >matlab/bin/glnxa64/SAVE/after.dir"


########################################################################
#
# Generate up-to-date Doxygen documentation
#
########################################################################

-run-after-sync "if [ $CLUSTER = \"Bcgir_task\" ]; then time -p $SYNCMASTERDIR/doxygen-it ; fi"


########################################################################
#
# git-enable this .latest_pass cluster image
#
########################################################################

# Newly sync'ed cluster image lacks our private .gitignore files
-run-after-sync "$SYNCMASTERDIR/add-git-ignore-files"

# Add a sandbox root sbcheck.cfg to suppress running sbedits
-run-after-sync "$SYNCMASTERDIR/add-sbcheck-cfg-file"

# Add a "git filesystem-agnostic" symbolic link to our separate git repo
-run-after-sync "$SYNCMASTERDIR/link-to-git-repo"

# Once sbsyncmaster completes running this cfg file it will make this
# .latest_pass image readonly.  Indicate to the sync-one-cluster script
# that there is a new .latest_pass and that therefore it needs to add
# a new commit to the repo.
-run-after-sync "touch $SBSYNCMASTER_NEED_COMMIT"
