# Remove package tests that trigger GCC's raw string bug
#-run-after-sync "rm -f matlab/src/eml/pkgtest/tMcosInference.cpp matlab/src/eml/pkgtest/tSSAInference.cpp"

########################################################################
#
# Perform the fundamental "sync" to copy sources and compiled binaries
#
########################################################################
-cfg cgir_syncmaster


########################################################################
#
# Clean out obvious trash
#
########################################################################

-run-after-sync "rm -rf .sbtools/global GPATH GRTAGS GTAGS ID"
-run-after-sync "if [ -e .git ] ; then chmod -R a+w .git ; rm -rf .git ; fi"


########################################################################
#
# git-enable this workspace with a pristine repository
#
########################################################################

-run-after-sync "git init"
-run-after-sync "git config --local user.name  ${GIT_USER_NAME}"
-run-after-sync "git config --local user.email ${GIT_USER_EMAIL}"

# Create a set of .gitignore files to exclude binary items
# and subtrees that I will never visit
-run-after-sync "${HOME}/.sbsyncmaster/add-git-ignore-files"
# Move the top-level .gitignore to its canonical location
-run-after-sync "mv .gitignore .git/info/exclude"

# Make the files that git will track writeable
-run-after-sync "git add matlab --dry-run --all | sed -nre '/^add / s/^add .(.*).$/\1/p' | xargs chmod u+w"

# Initial add and commit per the .gitignores (no compression)
-run-after-sync "git config --local core.compression 0"
-run-after-sync "time -p git add matlab >/dev/null 2>&1"
-run-after-sync "time -p sbver | sed -nre '/SyncFrom/ s|^.*/mathworks/devel/jobarchive/([^/]*/[^/]*)$|\1|gp' | git commit -F - >/dev/null 2>&1"
# Tag this initial commit for later reference
-run-after-sync "time -p git tag BASE"
# Create a branch (without actually checking it out) to record initial perforce state
-run-after-sync "time -p git branch --no-track perforce HEAD"
# Now repack with maximal compression
-run-after-sync "git config --local core.compression 9"
-run-after-sync "time -p git repack -a -d -f --depth=50 --window=250 --write-bitmap-index"


########################################################################
#
# Build various (large) index structures.  Do this after creating the
# git repository so as not to inflate the repository's size.
#
########################################################################

# Regenerate matlab/toolbox/local/toolbox_cache-ARCH.xml
-run-after-sync "sbgentbxcache"

# Generate the per component lists of files maintained in a parallel
# directory tree beneath matlab/.sbtools/global but drop the nearly
# useless list of derived files
-run-after-sync "time -p sblocate -gendb"
-run-after-sync "rm -rf .sbtools/global/matlab/derived"

# Use remaining files database to generate the tags database
-run-after-sync "time -p sbglobal -num-threads 12 -gentags matlab/src matlab/toolbox"

# Use my newer versions of GNU global and gtags if available
-run-after-sync "if [ -e ${HOME}/bin/mathworks-global ] ; then PATH=/usr/local/bin:${PATH} time -p ${HOME}/bin/mathworks-global ; fi"

# Use src/cg_ir/ez.mk to derive a list of modules to index via sbcpptags
-run-after-sync "cat matlab/src/cg_ir/ez.mk | sed -nre '/\$\(MAKE\) -s -C / s|^.* -s -C ../([^ ]*) .*$|matlab/src/\1|p' | sort >matlab/sbcpptags.cfg"
-run-after-sync "time -p sbcpptags -mods matlab/sbcpptags.cfg"

# Build emacs' WorkSpace Files index (for my wsf.el package)
-run-after-sync "time -p /usr/bin/emacs --batch --load ${HOME}/.emacs --eval='(load-library \"wsf\")' -f wsf--current-completions -f save-buffers-kill-emacs"


########################################################################
#
# Hide nearly useless debug symbols that only slow us down
# (Client needs -no-debug-backing-stores in $(HOME)/.sbtools/sb.cfg)
#
########################################################################

# Start by hiding _all_ symbols
-run-after-sync "mkdir -p matlab/bin/glnxa64/HIDE"
-run-after-sync "time -p find matlab/bin/glnxa64 -name \"*.dbg\" -exec mv {} matlab/bin/glnxa64/HIDE \;"
# Restore libraries needed so breaksegv works
-run-after-sync "if [ -f matlab/bin/glnxa64/HIDE/libmwmcr.so.dbg ]; then mv matlab/bin/glnxa64/HIDE/libmwmcr.so.dbg matlab/bin/glnxa64/libmwmcr.so.dbg ;fi"
-run-after-sync "if [ -f matlab/bin/glnxa64/HIDE/libmwfl.so.dbg  ]; then mv matlab/bin/glnxa64/HIDE/libmwfl.so.dbg  matlab/bin/glnxa64/libmwfl.so.dbg  ;fi"

########################################################################
#
# Rebuild in full debug-mode those few modules we really care about
#
########################################################################

# This rebuilds all downstream clients (typically far too much)
#-run-after-sync "echo 'matlab/src/cg_ir/export/include/cg_ir/fwd/common.hpp' > force.txt"
#-run-after-sync "time -p sbsmartbuild -F force.txt DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1"

-run-after-sync "cd matlab/src/cg_ir ; time -p /hub/share/sbtools/apps/cgir_tools/cgmake -f ez.mk DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1"


########################################################################
#
# Epilog
#
########################################################################

# At the bottom of the log show the size of the .git repository
-run-after-sync "du -sh .git"
