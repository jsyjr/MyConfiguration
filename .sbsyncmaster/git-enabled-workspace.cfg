########################################################################
#
# Perform the fundamental "sync" to copy sources and compiled binaries
# (cfg files: http://www-sbtools-ah/hub/share/sbtools/etc/sbsync/cfg/)
#
########################################################################
-P glnxa64
# -exclude mattab/examples
# -exclude mattab/help
# -exclude mattab/shared/sim3d
# -exclude mattab/shared/sim3dprojects
 -cfg cgir_syncmaster


########################################################################
#
# Clean out obvious trash
#
########################################################################

-run-after-sync "rm -rf .sbtools/global GPATH GRTAGS GTAGS ID"
-run-after-sync "if [ -e .git ] ; then chmod -R a+w .git ; rm -rf .git ; fi"


########################################################################
#
# git-enable this workspace with a pristine repository
#
########################################################################

-run-after-sync "git init"
-run-after-sync "git config --local user.name  ${GIT_USER_NAME}"
-run-after-sync "git config --local user.email ${GIT_USER_EMAIL}"

# Create a set of .gitignore files to exclude binary items
# and subtrees that I expect never to have to visit
-run-after-sync "${HOME}/.sbsyncmaster/add-git-ignore-files"
# Move the top-level .gitignore to its canonical location
-run-after-sync "mv .gitignore .git/info/exclude"

# Initial add and commit per the .gitignores (no compression yet)
-run-after-sync "git config --local core.compression 0"
-run-after-sync "time -p git add matlab >/dev/null 2>&1"
-run-after-sync "sbver | grep SyncFrom"
-run-after-sync "time -p sbver | sed -nre '/SyncFrom/ s|^.*/(B[^/ ]*).*$|\1|gp' | git commit -F - >/dev/null 2>&1"
# Tag this initial commit for later reference
-run-after-sync "time -p git tag BASE"
# Create a branch (without actually checking it out) to record initial perforce state
-run-after-sync "time -p git branch --no-track -f perforce HEAD"
# Now repack with maximal compression
-run-after-sync "git config --local core.compression 9"
-run-after-sync "time -p git repack -a -d -f --depth=50 --window=250 --write-bitmap-index"


########################################################################
#
# Do not stubmle over non-existent modules (specifically in Bcgir_thin)
#
########################################################################

-run-after-sync "if [ ! -d matlab/src/cgir_parallel           ]; then sed --in-place '/cgir_parallel/  s/$(MAKE)/echo/' matlab/src/cg_ir/ez.mk ; fi"
-run-after-sync "if [ ! -d matlab/src/half_precision/half_avx ]; then sed --in-place '/half_precision/ s/$(MAKE)/echo/' matlab/src/cg_ir/ez.mk ; fi"


########################################################################
#
# Build various (large) index structures.  Do this after creating the
# git repository so as not to inflate the repository's size.
#
########################################################################

# Generate the per component lists of files maintained in a parallel
# directory tree beneath matlab/.sbtools/global but drop the nearly
# useless list of derived files
-run-after-sync "time -p sblocate -gendb"
-run-after-sync "rm -rf .sbtools/global/matlab/derived"

# Ensure connection to localhub (must run after sblocate)
-run-after-sync "sblocalhub -sync"

# Use the remaining database of sblocated file to generate the tags database
-run-after-sync "time -p sbglobal -num-threads 12 -gentags matlab/src matlab/toolbox matlab/test"

# Use my newer versions of GNU global and gtags if available
-run-after-sync "if [ -e ${HOME}/bin/mathworks-global ] ; then PATH=/usr/local/bin:${PATH} time -p ${HOME}/bin/mathworks-global matlab/src matlab/toolbox matlab/test ; fi"

# Regenerate matlab/toolbox/local/toolbox_cache-ARCH.xml
-run-after-sync "time -p sbgentbxcache"

# Use src/cg_ir/ez.mk to derive a list of modules to index via sbcpptags
# -run-after-sync "cat matlab/src/cg_ir/ez.mk | sed -nre '/\$\(MAKE\) -s -C / s|^.* -s -C ../([^ ]*) .*$|matlab/src/\1|p' | sort >matlab/sbcpptags.cfg"
# -run-after-sync "time -p sbcpptags -mods matlab/sbcpptags.cfg"

# Build emacs' WorkSpace Files index (for my wsf.el package)
-run-after-sync "time -p /usr/bin/emacs --batch --load ${HOME}/.emacs --eval='(load-library \"wsf\")' -f wsf--current-completions -f save-buffers-kill-emacs"


########################################################################
#
# Delete nearly useless debug symbols that only slow us down
# (Client needs -no-debug-backing-stores in $(HOME)/.sbtools/sb.cfg)
#
########################################################################

# Protect libraries needed so breaksegv works
-run-after-sync "mkdir -p matlab/bin/glnxa64/SAVE"
-run-after-sync "if [ -f matlab/bin/glnxa64/libmwmcr.so.dbg ]; then mv matlab/bin/glnxa64/libmwmcr.so.dbg matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg ;fi"
-run-after-sync "if [ -f matlab/bin/glnxa64/libmwfl.so.dbg  ]; then mv matlab/bin/glnxa64/libmwfl.so.dbg  matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  ;fi"
# Delete all remaining .dbg files
-run-after-sync "time -p find matlab/bin/glnxa64 -name \"*.dbg\" -exec rm {} \;"
# Restore libraries needed so breaksegv works
-run-after-sync "if [ -f matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg ]; then mv matlab/bin/glnxa64/SAVE/libmwmcr.so.dbg matlab/bin/glnxa64/libmwmcr.so.dbg ;fi"
-run-after-sync "if [ -f matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  ]; then mv matlab/bin/glnxa64/SAVE/libmwfl.so.dbg  matlab/bin/glnxa64/libmwfl.so.dbg  ;fi"
-run-after-sync "rm -r matlab/bin/glnxa64/SAVE"


########################################################################
#
# Run sbsmartbuild's prebuild to create the proper header environment
#
########################################################################

-run-after-sync "echo 'matlab/src/cg_ir/export/include/cg_ir/fwd/common.hpp' > force.txt"
-run-after-sync "time -p sbsmartbuild -F force.txt DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1 prebuild"


########################################################################
#
# Rebuild in full debug-mode the modules we care about (those in ez.mk)
#
########################################################################

# This rebuilds all downstream clients (typically far too much)
#-run-after-sync "echo 'matlab/src/cg_ir/export/include/cg_ir/fwd/common.hpp' > force.txt"
#-run-after-sync "time -p sbsmartbuild -F force.txt DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1"

# Build cgir_support initially with RA_LOGGING enabled
-run-after-sync "cd matlab/src/cg_ir ; time -p ${MAKE_SCRIPT} -f ez.mk DEBUG=1 NORUNTESTS=1 DISABLE_WARNINGS_AS_ERROR=1"


########################################################################
#
# Generate up-to-date Doxygen documentation
#
########################################################################

-run-after-sync                                             "cd matlab/src/cg_ir            ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_core"
-run-after-sync "if [ -d matlab/src/cgir_cgel       ]; then  cd matlab/src/cgir_cgel        ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_cgel        ; fi"
-run-after-sync "if [ -d matlab/src/cgir_clair      ]; then  cd matlab/src/cgir_clair       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_clair       ; fi"
-run-after-sync "if [ -d matlab/src/cgir_cpp_emitter]; then  cd matlab/src/cgir_cpp_emitter ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_cpp_emitter ; fi"
-run-after-sync "if [ -d matlab/src/cgir_interp     ]; then  cd matlab/src/cgir_interp      ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_interp      ; fi"
-run-after-sync "if [ -d matlab/src/cgir_polly      ]; then  cd matlab/src/cgir_polly       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_polly       ; fi"
-run-after-sync "if [ -d matlab/src/cgir_spike      ]; then  cd matlab/src/cgir_spike       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_spike       ; fi"
-run-after-sync "if [ -d matlab/src/cgir_support    ]; then  cd matlab/src/cgir_support     ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_support     ; fi"
-run-after-sync "if [ -d matlab/src/cgir_tests      ]; then  cd matlab/src/cgir_tests       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_tests       ; fi"
-run-after-sync "if [ -d matlab/src/cgir_vm_rt      ]; then  cd matlab/src/cgir_vm_rt       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_vm_rt       ; fi"
-run-after-sync "if [ -d matlab/src/cgir_xform      ]; then  cd matlab/src/cgir_xform       ; time -p mw gmake doxygen COMPONENTS_TO_BUIlD=cgir_xform       ; fi"
# -run-after-sync "cd matlab ; rm -rf derived/doxygen/src_*_only/ derived/doxygen/tmp"


########################################################################
#
# Epilog
#
########################################################################

# At the bottom of the log show the size of the .git repository
-run-after-sync "du -sh .git"
