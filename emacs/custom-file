(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu t)
 '(ac-auto-start nil)
 '(ac-comphist-file "~/.emacs.d/auto-complete/history.dat")
 '(ac-delay 0.5)
 '(ac-dictionary-directories '("~/emacs/auto-complete/mode-dicts"))
 '(ac-dictionary-files '("~/emacs/auto-complete/user-dict"))
 '(ac-use-menu-map t)
 '(activate-mark-hook 'my/turn-on-delete-selection-mode t)
 '(ansi-color-names-vector
   ["black" "#ee9090" "pale green" "khaki" "steelblue1" "dark violet" "DarkSlateGray1" "white"])
 '(apropos-do-all t)
 '(asm-comment-char 35)
 '(auto-save-file-name-transforms
   '(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)
     (".*" "~/.emacs.d/autosave/\\1" t)))
 '(auto-save-list-file-prefix "~/.emacs.d/autosave-list/saves-")
 '(backup-by-copying t)
 '(backup-directory-alist '((".*" . "/jyates/.emacs.d/backup/")))
 '(before-save-hook '(copyright-update time-stamp))
 '(blink-cursor-blinks 0)
 '(blink-cursor-delay 0)
 '(c-tab-always-indent nil)
 '(column-number-mode t)
 '(comint-get-old-input (lambda nil "") t)
 '(comint-input-ignoredups t)
 '(comint-input-ring-size 5000)
 '(comint-scroll-to-bottom-on-input t)
 '(compilation-scroll-output 'first-error)
 '(completion-ignored-extensions
   '(".a" ".aux" ".bak" ".bbl" ".bin" ".blg" ".class" ".cp" ".cps" ".dvi" ".elc" ".fas" ".fmt" ".fn" ".fns" ".glo" ".idx" ".ky" ".kys" ".lib" ".ln" ".lof" ".log" ".lot" ".map" ".o" ".obj" ".pg" ".pgs" ".pyc" ".toc" ".tp" ".tps" ".vr" ".vrs" ".x86f" "~"))
 '(copyright-year-ranges t)
 '(cua-enable-cua-keys nil)
 '(cua-enable-cursor-indications t)
 '(cua-mode t nil (cua-base))
 '(cua-normal-cursor-color '(bar . "Orange"))
 '(cua-overwrite-cursor-color '(box . "HotPink1"))
 '(cua-read-only-cursor-color '(box . "SeaGreen1"))
 '(custom-buffer-done-kill t)
 '(custom-theme-directory "~/emacs/themes/")
 '(default-frame-alist
    '((foreground-color . "white")
      (background-color . "black")
      (font . "dina-13")
      (cursor-type . bar)
      (fullscreen . maximized)
      (minibuffer . t)
      (vertical-scroll-bars)
      (menu-bar-lines . 0)
      (tool-bar-lines . 0)
      (icon-type . nill)))
 '(delete-old-versions t)
 '(dired-listing-switches "-agGh --group-directories-first")
 '(dumb-jump-mode t)
 '(ediff-cmp-options '("diff --histogram"))
 '(ediff-cmp-program "git")
 '(ediff-keep-variants nil)
 '(ediff-make-buffers-readonly-at-startup t)
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-use-last-dir t)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(el-get-git-shallow-clone t)
 '(eol-mnemonic-mac ":")
 '(eol-mnemonic-undecided "?")
 '(eol-mnemonic-unix "/")
 '(eshell-aliases-file "/jyates/emacs/eshell/alias")
 '(eshell-modules-list
   '(eshell-alias eshell-banner eshell-basic eshell-cmpl eshell-dirs eshell-glob eshell-hist eshell-ls eshell-pred eshell-prompt eshell-script eshell-term))
 '(explicit-shell-file-name "/bin/bash")
 '(ffap-require-prefix t)
 '(folding-advice-instantiate nil)
 '(folding-goto-key "\347f")
 '(folding-mode-prefix-key ",")
 '(frames-only-mode-reopen-frames-from-hidden-x11-virtual-desktops t)
 '(gc-cons-threshold 50000000)
 '(gdb-create-source-file-list nil)
 '(gdb-many-windows t)
 '(gdb-stack-buffer-addresses t)
 '(gdb-thread-buffer-arguments nil)
 '(git-commit-setup-hook
   '(git-commit-save-message git-commit-setup-changelog-support git-commit-turn-on-auto-fill git-commit-propertize-diff with-editor-usage-message))
 '(global-auto-complete-mode t)
 '(global-font-lock-mode t)
 '(global-hl-line-mode t)
 '(graphviz-dot-preview-extension "svg")
 '(grep-command "grep --color -nH -e ")
 '(grep-find-command '("find . -type f -exec grep --color -nH -e  {} +" . 42))
 '(grep-find-template "find <D> <X> -type f <F> -exec grep <C> -nH -e <R> {} +")
 '(grep-highlight-matches nil)
 '(grep-template "grep <X> <C> -nH -e <R> <F>")
 '(grep-use-null-device nil)
 '(gud-gdb-command-name "gdb -i=mi")
 '(hl-line-sticky-flag nil)
 '(indent-tabs-mode nil)
 '(indicate-buffer-boundaries 'right)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(initial-frame-alist
   '((foreground-color . "white")
     (background-color . "black")
     (font . "dina-13")
     (cursor-type . bar)
     (fullscreen . maximized)
     (minibuffer . t)
     (vertical-scroll-bars)
     (menu-bar-lines . 0)
     (tool-bar-lines . 0)
     (icon-type . nill)))
 '(initial-scratch-message nil)
 '(isearch-mode-end-hook 'my/enter-again-if-enter t)
 '(ispell-personal-dictionary "~/emacs/aspell.en.pws")
 '(ivy-count-format "(%d/%d) ")
 '(ivy-magic-tilde nil)
 '(ivy-mode t)
 '(ivy-sort-matches-functions-alist
   '((t . ivy--prefix-sort)
     (ivy-switch-buffer . ivy-sort-function-buffer)))
 '(kept-old-versions 5)
 '(kill-whole-line t)
 '(list-directory-verbose-switches "-l --group-directories-first")
 '(load-prefer-newer t)
 '(ls-lisp-dirs-first t)
 '(ls-lisp-ignore-case t)
 '(magit-auto-revert-mode t)
 '(magit-backup-mode nil)
 '(magit-completing-read-function 'ivy-completing-read)
 '(magit-display-buffer-function 'magit-display-buffer-fullcolumn-most-v1)
 '(magit-refs-show-commit-count 'all)
 '(magit-repository-directories '("~/repos/awesome" "~/repos/doxygen" "~/repos/st"))
 '(magit-repository-directories-depth 0 t)
 '(magit-save-repository-buffers nil)
 '(mediawiki-pop-buffer-hook nil)
 '(mediawiki-site-alist
   '(("Wikipedia" "http://en.wikipedia.org/w/" "username" "password" "" "Main Page")
     ("Mathworks User:Jyates" "http://inside.mathworks.com/wiki/" "jyates" "" "" "User:Jyates")
     ("Mathworks CGIR" "http://inside.mathworks.com/wiki/" "jyates" "" "" "Category:CGIR")))
 '(mediawiki-site-default "Mathworks CGIR")
 '(message-log-max 10000)
 '(minibuffer-frame-alist
   '((height . 2)
     (fullscreen . fullwidth)
     (user-size . t)
     (top - 0)
     (left . 0)
     (user-position . t)))
 '(mode-line-format
   '("%e" mode-line-window-id
     #("-" 0 1
       (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))
     mode-line-mule-info mode-line-client mode-line-modified mode-line-remote
     #(" " 0 1
       (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))
     mode-line-position mode-line-frame-identification mode-line-buffer-identification
     #(" " 0 1
       (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))
     (which-func-mode
      ("" which-func-format
       #(" " 0 1
         (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))))
     mode-line-modes
     (global-mode-string
      (#("-" 0 1
         (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))
       global-mode-string))
     #("-%-" 0 3
       (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy enitre frame
mouse-3: Remove current window from display"))))
 '(mode-line-position '(:eval (my/position-widget)) t)
 '(next-error-hook 'compile-goto-error)
 '(next-error-recenter '(4))
 '(org-default-notes-file "~/org/capture.org")
 '(org-hide-leading-stars t)
 '(org-mobile-directory "~/Dropbox/MobileOrg")
 '(org-mobile-files '(org-agenda-files "~/org"))
 '(org-modules
   '(org-docview org-info org-habit org-inlinetask org-protocol org-mouse))
 '(org-support-shift-select t)
 '(p4-global-key-prefix "p")
 '(package-archives
   '(("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/")))
 '(package-selected-packages '(async))
 '(pp^L-^L-string-function (lambda (win) (make-string (1- (window-width win)) 32)))
 '(pretty-control-l-mode t)
 '(projectile-completion-system 'ido)
 '(projectile-project-search-path "/ws")
 '(recentf-mode t)
 '(recentf-save-file "~/.emacs.d/recentf")
 '(require-final-newline 'query)
 '(ripgrep-arguments '("--no-ignore"))
 '(safe-local-variable-values
   '((eval add-to-list 'auto-mode-alist
           '("\\.cgr\\'" . c++-mode))
     (eval add-to-list 'auto-mode-alist
           '("\\.inc\\'" . c++-mode))
     (eval add-to-list 'auto-mode-alist
           '("\\.wiki\\'" . mediawiki-mode))
     (eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook"
           (add-hook 'write-contents-functions
                     (lambda nil
                       (delete-trailing-whitespace)
                       nil))
           (require-maybe 'whitespace)
           "Sometimes the mode needs to be toggled off and on."
           (whitespace-mode 0)
           (whitespace-mode 1))
     (whitespace-line-column . 80)
     (whitespace-style face tabs trailing lines-tail)
     (folded-file . t)
     (folding-mode . t)))
 '(scalable-fonts-allowed t)
 '(scroll-conservatively 1)
 '(send-mail-function 'mailclient-send-it)
 '(server-switch-hook '(my/pop-file-name-history))
 '(server-temp-file-regexp "^/tmp/\\|.*\\.tmp")
 '(server-window 'pop-to-buffer)
 '(shell-mode-hook '(ansi-color-for-comint-mode-on))
 '(show-paren-delay 0)
 '(show-paren-mode t)
 '(show-trailing-whitespace t)
 '(smart-jump-bind-keys-for-evil nil)
 '(smerge-auto-leave nil)
 '(smerge-command-prefix "")
 '(smex-save-file "~/.emacs.d/smex.save")
 '(split-height-threshold nil)
 '(tab-always-indent nil)
 '(tab-stop-list
   '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 165 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 265 260 264 268 272 276 280 284 288 292 296 300 304 308 312 316 320))
 '(text-mode-hook '(my/text-mode))
 '(tooltip-delay 0.3)
 '(tramp-default-method "ssh")
 '(tramp-syntax 'default nil (tramp))
 '(transient-mark-mode t)
 '(truncate-lines t)
 '(uniquify-buffer-name-style 'forward nil (uniquify))
 '(use-dialog-box nil)
 '(vc-handled-backends nil)
 '(vc-ignore-dir-regexp
   "\"\\\\`\\\\(?:/mathworks\\\\|/mathworks/[A-Z]+\\\\|/mathworks/[^/]+\\\\|/mathworks/[A-Z]+/[^/]+\\\\|/mathworks/devel/[^/]+\\\\|/mathworks/[A-Z]+/devel/[^/]+\\\\|/mathworks/devel/bat/[^/]+\\\\|/mathworks/[A-Z]+/devel/bat/[^/]+\\\\|/mathworks/devel/jobarchive\\\\|/mathworks/[A-Z]+/devel/jobarchive\\\\|/mathworks/hub/[^/]+\\\\|/mathworks/[A-Z]+/hub/[^/]+\\\\|/mathworks/hub/scratch\\\\|/mathworks/[A-Z]+/hub/scratch\\\\|/mathworks/hub/site-local\\\\|/mathworks/[A-Z]+/hub/site-local\\\\|/sandbox\\\\|/home\\\\|/hub\\\\|/public\\\\|/src\\\\|/scratch\\\\|\\\\)/\\\\'\"
")
 '(vc-make-backup-files t)
 '(version-control t)
 '(visible-bell t)
 '(visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
 '(which-func-format
   '("["
     (:propertize which-func-current local-map
                  (keymap
                   (mode-line keymap
                              (mouse-1 . beginning-of-defun)
                              (mouse-2 .
                                       #[nil "e\300=\203	 \301 \207~\207"
                                             [1 narrow-to-defun]
                                             2 nil nil])
                              (mouse-3 . end-of-defun)))
                  face which-func help-echo "Function (enclosing or preceding)
mouse-1: go to beginning
mouse-2: toggle function narrowing
mouse-3: go to end")
     "]"))
 '(which-function-mode t nil (which-func))
 '(whitespace-global-mode t)
 '(with-editor-emacsclient-executable "/usr/bin/emacsclient")
 '(x-select-enable-clipboard-manager nil)
 '(x-stretch-cursor t)
 '(yas-global-mode t)
 '(yas-snippet-dirs '("~/emacs/yasnippet")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-candidate-face ((t (:background "LightCyan1" :foreground "black"))))
 '(ac-selection-face ((t (:background "aquamarine1" :foreground "black"))))
 '(ac-yasnippet-candidate-face ((t (:background "lavender blush" :foreground "black"))))
 '(ac-yasnippet-selection-face ((t (:background "PeachPuff2" :foreground "black"))))
 '(compilation-column-number ((t (:inherit file-name-shadow))))
 '(compilation-info ((t (:inherit font-lock-comment-face))))
 '(compilation-line-number ((t (:inherit font-lock-preprocessor-face))))
 '(cursor ((t (:background "gold"))))
 '(diff-added ((t (:inherit diff-changed :foreground "#c8ffe0"))))
 '(diff-file-header ((t (:inherit diff-header :foreground "light goldenrod yellow" :weight bold))))
 '(diff-header ((t (:background "gray15"))))
 '(diff-nonexistent ((t (:strike-through "red"))))
 '(diff-refine-added ((t (:inherit diff-added :background "#001800"))))
 '(diff-refine-change ((t (:background "#1c3850"))) t)
 '(diff-refine-removed ((t (:inherit diff-removed :background "#200000"))))
 '(diff-removed ((t (:inherit diff-changed :foreground "#ffd0e0"))))
 '(ediff-current-diff-A ((t (:inherit highlight :foreground "DarkSeaGreen1"))))
 '(ediff-current-diff-Ancestor ((t (:inherit highlight :foreground "yellow"))))
 '(ediff-current-diff-B ((t (:inherit highlight :foreground "MistyRose1"))))
 '(ediff-current-diff-C ((t (:inherit highlight :foreground "pale goldenrod"))))
 '(ediff-even-diff-A ((t (:background "#300000"))))
 '(ediff-even-diff-Ancestor ((t (:background "#300000"))))
 '(ediff-even-diff-B ((t (:background "#300000"))))
 '(ediff-even-diff-C ((t (:background "#300000"))))
 '(ediff-fine-diff-A ((t (:inherit ediff-current-diff-A :background "#525252" :weight bold))))
 '(ediff-fine-diff-Ancestor ((t (:inherit ediff-current-diff-Ancestor :background "#525252" :weight bold))))
 '(ediff-fine-diff-B ((t (:inherit ediff-current-diff-B :background "#525252" :weight bold))))
 '(ediff-fine-diff-C ((t (:inherit ediff-current-diff-C :background "#525252" :weight bold))))
 '(ediff-odd-diff-A ((t (:background "#281400"))))
 '(ediff-odd-diff-Ancestor ((t (:background "#281400"))))
 '(ediff-odd-diff-B ((t (:background "#281400"))))
 '(ediff-odd-diff-C ((t (:background "#281400"))))
 '(error ((t (:foreground "brown2"))))
 '(fixed-pitch ((t nil)))
 '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 '(font-lock-comment-face ((t (:foreground "MediumAquamarine"))))
 '(font-lock-constant-face ((((class color) (background dark)) (:weight bold :foreground "DarkOrchid"))))
 '(font-lock-doc-string-face ((t (:foreground "green2"))))
 '(font-lock-function-name-face ((t (:foreground "SkyBlue"))))
 '(font-lock-keyword-face ((t (:weight bold :foreground "CornflowerBlue"))))
 '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 '(font-lock-reference-face ((t (:foreground "DodgerBlue"))))
 '(font-lock-string-face ((t (:foreground "LimeGreen"))))
 '(font-lock-type-face ((t (:foreground "#9290ff"))))
 '(font-lock-variable-name-face ((t (:foreground "PaleGreen"))))
 '(font-lock-warning-face ((((class color) (background dark)) (:foreground "yellow" :background "red"))))
 '(fringe ((((class color) (background dark)) (:background "gray15"))))
 '(header-line ((t (:inherit mode-line-inactive :box nil :weight bold))))
 '(highlight ((t (:background "#123060"))))
 '(hl-line ((t (:underline "gray50"))))
 '(info-header-xref ((t (:foreground "LightSalmon4"))))
 '(ivy-current-match ((t (:underline "white"))))
 '(ivy-minibuffer-match-face-1 ((t (:foreground "navajo white"))))
 '(ivy-minibuffer-match-face-2 ((t (:foreground "pink"))))
 '(ivy-minibuffer-match-face-3 ((t (:foreground "sky blue"))))
 '(ivy-minibuffer-match-face-4 ((t (:foreground "DarkSeaGreen1"))))
 '(magit-blame-heading ((t (:background "gray20"))))
 '(magit-branch-local ((t (:foreground "LightSkyBlue1" :underline t))))
 '(magit-branch-remote ((t (:inherit magit-branch-local :foreground "DarkSeaGreen2"))))
 '(magit-diff-added ((t (:inherit diff-added))))
 '(magit-diff-added-highlight ((t (:inherit diff-refine-added))))
 '(magit-diff-context ((t (:inherit magit-dimmed))))
 '(magit-diff-context-highlight ((t (:inherit magit-diff-context :background "grey10"))))
 '(magit-diff-file-heading ((t (:inherit magit-diff-hunk-heading :foreground "LightSkyBlue1"))))
 '(magit-diff-file-heading-highlight ((t (:inherit (magit-diff-hunk-heading-highlight magit-diff-file-heading)))))
 '(magit-diff-hunk-heading ((t (:background "grey15"))))
 '(magit-diff-hunk-heading-highlight ((t (:inherit magit-section-highlight :weight bold))))
 '(magit-diff-removed ((t (:inherit diff-removed))))
 '(magit-diff-removed-highlight ((t (:inherit diff-refine-removed))))
 '(magit-diffstat-added ((t (:inherit magit-diff-added))))
 '(magit-diffstat-removed ((t (:inherit magit-diff-removed))))
 '(magit-dimmed ((t (:foreground "gray70"))))
 '(magit-hash ((t (:foreground "thistle1"))))
 '(magit-item-highlight ((t (:background "gray9"))))
 '(magit-log-head-label-tags ((t (:foreground "black" :background "wheat2" :box 1))))
 '(magit-section-heading ((t (:foreground "SteelBlue1" :weight bold))))
 '(magit-tag ((t (:foreground "LightGoldenrod2" :weight bold))))
 '(minibuffer-prompt ((t (:foreground "orange" :weight bold))))
 '(mode-line ((t (:background "tan2" :foreground "black" :box (:line-width -1 :style released-button) :height 1.2))))
 '(mode-line-buffer-id ((t (:weight bold))))
 '(mode-line-highlight ((t (:background "wheat2" :box (:line-width -1 :style released-button)))))
 '(mode-line-highlight-bold ((t (:background "wheat2" :weight bold :box (:line-width -1 :style released-button)))))
 '(mode-line-inactive ((t (:inherit mode-line :background "gray65"))))
 '(popup-isearch-match ((t (:inherit match))))
 '(pp^L-highlight ((((type x w32 mac graphic) (class color)) (:inherit shadow :strike-through t))))
 '(region ((t (:background "DarkSlateBlue"))))
 '(show-paren-match ((t (:background "light green" :foreground "black" :weight bold))))
 '(show-paren-mismatch ((t (:background "firebrick" :foreground "white"))))
 '(smerge-base ((t (:inherit ediff-even-diff-A))))
 '(smerge-lower ((t (:inherit ediff-odd-diff-A))))
 '(smerge-mine ((t (:inherit ediff-even-diff-A))) t)
 '(smerge-other ((t (:inherit ediff-odd-diff-A))) t)
 '(smerge-refined-added ((t (:inherit ediff-current-diff-A))))
 '(smerge-refined-changed ((t (:inherit ediff-current-diff-C))))
 '(smerge-refined-removed ((t (:inherit ediff-current-diff-B))))
 '(smerge-upper ((t (:inherit ediff-even-diff-A))))
 '(success ((t (:foreground "PaleGreen1"))))
 '(tooltip ((((class color)) (:inherit variable-pitch :background "#f5f5b5" :foreground "black"))))
 '(trailing-whitespace ((((class color) (background dark)) (:background "red3"))))
 '(variable-pitch ((t (:height 0.9 :family "Sans Serif"))))
 '(which-func ((t (:foreground "dark blue" :weight bold))))
 '(widget-documentation ((t (:inherit font-lock-comment-face))))
 '(widget-field ((t (:background "gray20"))))
 '(widget-single-line-field ((t (:inherit widget-field)))))
