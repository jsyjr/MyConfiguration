# Establish WORKSPACE and related env-vars; cd to WORKSPACE; strip $1 if present

# Use PWD when command-line is blank
if [ -z "$1" ]; then
    WORKSPACE=${PWD}
# Non-blank command-line, check for an absolute path
elif [ -d $(realpath $1) ] ; then
    WORKSPACE=$(realpath $1)
# Non-blank command-line, check for a local workspace
elif [ -d /ws/$1 ] ; then
     WORKSPACE=/ws/$1
# Non-blank command-line, check for a /sandbox workspace
elif [ -d $s/$1 ] ; then
     WORKSPACE=$s/$1
else
    echo
    echo "Unable to locate workspace \"$1\"."
    echo
    exit 1
fi

shift

WSNAME=${WORKSPACE##*/}

LOCALWS=${WORKSPACE}
if [ -L ${WORKSPACE}/SBSredirect ] ; then
    WORKSPACE=$(readlink -f ${WORKSPACE}/SBSredirect)
fi

if [ ! -d ${WORKSPACE}/matlab/src ] ; then
    echo
    echo "\"${WORKSPACE}\" does not appear to be an actual workspace."
    echo
    exit 1
fi

WORKGIT=
if [ -d ${WORKSPACE}/.git ]; then
   WORKGIT=${WORKSPACE}/.git
fi

# Before changing directory ensure that we return to ${PWD}
trap "cd ${PWD}" EXIT

cd ${LOCALWS}

CLONED=$(sbver | grep 'SyncFrom:' | sed -e 's|SyncFrom: /*mathworks/devel/jobarchive/\([^/]*\)/.*$|\1|').latest_pass
BACKUP=local_$(hostname)$(echo ${WORKSPACE} | sed -e 's|/|_|g')_backup/latest

# Determine any gecks attached to the workspace
GECKS=$( p4 opened \
       | grep 'edit change' \
       | sed -r -e 's/.*edit change ([0-9]+).*/\1/g' \
       | sort \
       | uniq \
       | xargs p4 describe \
       | sed -n -r -e '/^g[0-9]+/ { s/(g[0-9]+).*/\1/gp }' \
       )

# Determine the source cluster
CLUSTER=$( sbver \
         | grep 'SyncFrom:' \
         | sed -e 's|SyncFrom: /*mathworks/devel/jobarchive/\([^/]*\)/.*$|\1|' \
         )

PREQUALINFO=$s/$( echo ${GECKS} | sed -r -e 's/ /_/g' )_sfbPrequalInfo_${CLUSTER}
PREQUALFAIL=${PREQUALINFO}/testsuite_sbruntests/sbtest/failed_testsuites.txt


echo
echo "WORKSPACE  =" ${WORKSPACE}
echo "LOCALWS    =" ${LOCALWS}
echo "WSNAME     =" ${WSNAME}
echo "CLUSTER    =" ${CLUSTER}
echo "GECKS=     =" ${GECKS}
echo "CLONED     =" ${CLONED}
echo "BACKUP     =" ${BACKUP}
echo "WORKGIT    =" ${WORKGIT}
echo "PREQUALINFO=" ${PREQUALINFO}

# Zap PREQUALFAIL if it is not a true file
if [ ! -e ${PREQUALFAIL} ]; then
echo " (Zapping PREQUALFAIL as computed path ${PREQUALFAIL} does not exist)"
   PREQUALFAIL=
fi

echo "PREQUALFAIL=" ${PREQUALFAIL}
echo
