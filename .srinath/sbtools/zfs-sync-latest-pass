#!/bin/bash

if [ $SILENT ]; then
    STDOUT=/tmp/zfs_sync_latest_pass_out_log.$USER.$$
    STDERR=/tmp/zfs_sync_latest_pass_err_log.$USER.$$
else
    STDOUT=/dev/stdout
    STDERR=/dev/stderr
fi

if [ "$P4CONFIG" == "" ]; then
    # sbsync fails if P4CONFIG is not set.
    export P4CONFIG=.perforce
fi

function print_logs_and_exit
{
    echo $1
    if [ $SILENT ]; then
        echo "Printing logs below:"
        echo "==================stdout: $STDOUT======================"
        cat $STDOUT
        echo "==================stderr: $STDERR======================"
        cat $STDERR
    fi
}

function sync_latest
{
    zfs_master=$1

    if [ $zfs_master == "" ]; then
        echo "Set zfs_master to a valid cluster name (for example Asfstage). Best is to do this in your .cshrc.mine or .bashrc"
        exit 1
    fi

    LATEST_PASS=`readlink /mathworks/devel/jobarchive/$zfs_master/latest_pass`
    sudo zfs list -H local-ssd/$USER/$zfs_master@${LATEST_PASS} > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
        cd /local-ssd/$USER/$zfs_master
        if [ $? -ne 0 ]; then
            echo "/local-ssd/$USER/$zfs_master does not exist. Create it for the first time using the commands: "
            echo "sudo zfs create local-ssd/$USER/$zfs_master"
            echo "sudo chown -R $USER:users local-ssd/$USER/$zfs_master"
            exit 1
        fi
        if [ $SILENT ]; then
            BS="-no-backspace"
        else
            BS=""
        fi
        sbsync $BS -src-root $zfs_master -nobackup > $STDOUT 2> $STDERR
        if [ $? -eq 0 ]; then
            prepsb > $STDOUT 2> $STDERR
            if [ $? -eq 0 ]; then
                /usr/bin/sudo /sbin/zfs snap local-ssd/$USER/$zfs_master@${LATEST_PASS}
                echo -n local-ssd/$USER/$zfs_master@$LATEST_PASS > /local-ssd/$USER/latest_snap_$zfs_master.txt
                echo "Created new latest_pass from $zfs_master:$LATEST_PASS"
            else
                print_logs_and_exit "Error running prepsb in /local/$USER/$zfs_master! Sandbox is sync'ed but not ready to use!"
            fi
        else
            print_logs_and_exit "Error running sbsync!!"
        fi
    else
        echo -n local-ssd/$USER/$zfs_master@$LATEST_PASS > /local-ssd/$USER/latest_snap_$zfs_master.txt
        echo "Already synced the latest version of ${zfs_master}" > $STDOUT
    fi
}

for cluster in $ZFS_MASTER_SB
do
    sync_latest $cluster
done
